// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    authority?: string;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    rel?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    hreflang?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    media?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    deprecation?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    profile?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    offset?: number;
    /**
     * 
     * @type {Sort}
     * @memberof Pageable
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    pageNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    pageSize?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    paged?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    unpaged?: boolean;
}
/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    sorted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    unsorted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface TokenVO
 */
export interface TokenVO {
    /**
     * 
     * @type {string}
     * @memberof TokenVO
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenVO
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface UserLoginForm
 */
export interface UserLoginForm {
    /**
     * 
     * @type {string}
     * @memberof UserLoginForm
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginForm
     */
    password: string;
    /**
     * 
     * @type {UsernamePasswordAuthenticationToken}
     * @memberof UserLoginForm
     */
    authenticationToken?: UsernamePasswordAuthenticationToken;
}
/**
 * 
 * @export
 * @interface UsernamePasswordAuthenticationToken
 */
export interface UsernamePasswordAuthenticationToken {
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof UsernamePasswordAuthenticationToken
     */
    authorities?: Array<GrantedAuthority>;
    /**
     * 
     * @type {object}
     * @memberof UsernamePasswordAuthenticationToken
     */
    details?: object;
    /**
     * 
     * @type {boolean}
     * @memberof UsernamePasswordAuthenticationToken
     */
    authenticated?: boolean;
    /**
     * 
     * @type {object}
     * @memberof UsernamePasswordAuthenticationToken
     */
    principal?: object;
    /**
     * 
     * @type {object}
     * @memberof UsernamePasswordAuthenticationToken
     */
    credentials?: object;
    /**
     * 
     * @type {string}
     * @memberof UsernamePasswordAuthenticationToken
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface WorkoutForm
 */
export interface WorkoutForm {
    /**
     * 
     * @type {string}
     * @memberof WorkoutForm
     */
    date: string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutForm
     */
    position: number;
    /**
     * 
     * @type {string}
     * @memberof WorkoutForm
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutForm
     */
    exercise: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutForm
     */
    notes?: string;
}
/**
 * 
 * @export
 * @interface WorkoutVO
 */
export interface WorkoutVO {
    /**
     * 
     * @type {string}
     * @memberof WorkoutVO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutVO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutVO
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutVO
     */
    exercise?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutVO
     */
    position?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkoutVO
     */
    notes?: string;
    /**
     * 
     * @type {Array<Link>}
     * @memberof WorkoutVO
     */
    links?: Array<Link>;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginForm} userLoginForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginForm: UserLoginForm, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginForm' is not null or undefined
            if (userLoginForm === null || userLoginForm === undefined) {
                throw new RequiredError('userLoginForm','Required parameter userLoginForm was null or undefined when calling login.');
            }
            const localVarPath = `/api/auth`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userLoginForm !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userLoginForm !== undefined ? userLoginForm : {}) : (userLoginForm || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginForm} userLoginForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginForm: UserLoginForm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVO>> {
            const localVarAxiosArgs = await AuthControllerApiAxiosParamCreator(configuration).login(userLoginForm, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {UserLoginForm} userLoginForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginForm: UserLoginForm, options?: any): AxiosPromise<TokenVO> {
            return AuthControllerApiFp(configuration).login(userLoginForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserLoginForm} userLoginForm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(userLoginForm: UserLoginForm, options?: any) {
        return AuthControllerApiFp(this.configuration).login(userLoginForm, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * WorkoutsControllerApi - axios parameter creator
 * @export
 */
export const WorkoutsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WorkoutForm} workoutForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: async (workoutForm: WorkoutForm, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workoutForm' is not null or undefined
            if (workoutForm === null || workoutForm === undefined) {
                throw new RequiredError('workoutForm','Required parameter workoutForm was null or undefined when calling save.');
            }
            const localVarPath = `/api/workouts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workoutForm !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workoutForm !== undefined ? workoutForm : {}) : (workoutForm || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workouts1: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling workouts1.');
            }
            const localVarPath = `/api/workouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workouts2: async (pageable: Pageable, date: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling workouts2.');
            }
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling workouts2.');
            }
            const localVarPath = `/api/workouts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutsControllerApi - functional programming interface
 * @export
 */
export const WorkoutsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WorkoutForm} workoutForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save(workoutForm: WorkoutForm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutVO>> {
            const localVarAxiosArgs = await WorkoutsControllerApiAxiosParamCreator(configuration).save(workoutForm, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workouts1(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutVO>> {
            const localVarAxiosArgs = await WorkoutsControllerApiAxiosParamCreator(configuration).workouts1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workouts2(pageable: Pageable, date: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkoutVO>>> {
            const localVarAxiosArgs = await WorkoutsControllerApiAxiosParamCreator(configuration).workouts2(pageable, date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkoutsControllerApi - factory interface
 * @export
 */
export const WorkoutsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {WorkoutForm} workoutForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(workoutForm: WorkoutForm, options?: any): AxiosPromise<WorkoutVO> {
            return WorkoutsControllerApiFp(configuration).save(workoutForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workouts1(id: string, options?: any): AxiosPromise<WorkoutVO> {
            return WorkoutsControllerApiFp(configuration).workouts1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workouts2(pageable: Pageable, date: string, options?: any): AxiosPromise<Array<WorkoutVO>> {
            return WorkoutsControllerApiFp(configuration).workouts2(pageable, date, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutsControllerApi - object-oriented interface
 * @export
 * @class WorkoutsControllerApi
 * @extends {BaseAPI}
 */
export class WorkoutsControllerApi extends BaseAPI {
    /**
     * 
     * @param {WorkoutForm} workoutForm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsControllerApi
     */
    public save(workoutForm: WorkoutForm, options?: any) {
        return WorkoutsControllerApiFp(this.configuration).save(workoutForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsControllerApi
     */
    public workouts1(id: string, options?: any) {
        return WorkoutsControllerApiFp(this.configuration).workouts1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Pageable} pageable 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsControllerApi
     */
    public workouts2(pageable: Pageable, date: string, options?: any) {
        return WorkoutsControllerApiFp(this.configuration).workouts2(pageable, date, options).then((request) => request(this.axios, this.basePath));
    }

}


